<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="chapter_23" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Some Common Recurrence Relations</title>
<idx>Searching and Sorting Analysis</idx>
<idx>Derangements</idx>
<section xml:id="reading-23"><title>Reading Assignment</title>
<p>Read Section 8.4 of <em>Applied Discrete Structures</em>. There is no general method for solving all recurrence relations.  In this section we consider a few cases for which the method in Section 8.3 cannot be applied.</p>
<question component="paper"><title>Response Question</title><statement><p>  In this section we study algorithms for searching and sorting.  If you have data that isn't sorted, then the binary search algorithm can't be implemented and you must do a sequential search. In a sequential search your look at each item in a list until you find what you're looking for, or you reach the end of the list.  What is the average number of items you will examine in a successful, and in an unsuccessful search of a list with <m>n</m> items? </p></statement></question>
<p component="paper">Also, turn in solutions to these exercises: </p>
	<exercises component="paper">
<exercise><statement> <p>Prove that if <m>n \geq 0</m>, <m>\lfloor n/2\rfloor +\lceil n/2\rceil = n</m>.</p></statement></exercise>
		
<exercise><statement><p>One derangement of <m>\{1,2,3,4\}</m> is 2143.  List all others.</p></statement></exercise>
		</exercises>  
</section>
<section xml:id="questions-23"><title>In-Class Exercises</title>
<p> </p>
<exercises>
<exercise><statement>
<p>The <em>selection sort</em> algorithm on a list of <m>n</m> proceeds first by finding the largest item in the list and placing it last, exchanging it with the <m>n</m>-th item, if necessary.  Then a selection sort sort of the first <m>n-1</m> items is conducted. Let <m>C(n)</m> be the number of comparisons needed to complete a selection sort of <m>n</m> items.   Find a recurrence relation and initial condition for <m>C</m> and solve it.</p></statement></exercise>

<exercise><statement>
<p>Suppose <m>n \geq 2</m> and <m>1 \leq k \leq n</m>.  How many permutations of <m>\{1,2, \dots ,n\}</m>,  have the property that <m>k</m> is a fixed point?  The set of all such permutations is called <m>U_k</m> in the next problem.</p></statement></exercise>

<exercise xml:id="p3"><statement>
<p>Count the number of derangements of <m>\{1,2,3,4\}</m> using <xref ref="s-inclusion-exclusion" text="custom">inclusion-exclusion</xref>. Do this by counting the non-derangements in the union <m>U_1 \cup U_2 \cup U_3 \cup U_4</m>, where <m>U_k</m> is the set of permutations for which <m>k</m> is fixed. You can subtract that result from 4!   Generalize to an arbitrary value of <m>n</m>.</p></statement></exercise> 

<exercise><statement>
<p>Among all continuous functions on the interval <m>[0,1]</m>, how many are derangements in that they have no fixed points?</p></statement></exercise>

</exercises>
</section>
 
<section xml:id="s-inclusion-exclusion"><title>Inclusion-Exclusion</title>
<p>Here are the two and three set Inclusion-Exclusion Laws. You'll need to generalize to four sets and later to <m>n</m> sets in <xref ref="p3" text="local"/>, but all of the sets are similar so it isn't as complicated a you might think.</p>
 <theorem xml:id="inclusion-exclusion">
 <title>Laws of Inclusion-Exclusion</title>
 <idx>Inclusion-Exclusion, Laws of </idx>
<statement>
<p>Given finite sets <m>A_1, A_2, A_3</m>, then
<ol marker="(a)">
<li xml:id="ie2"><p>The Two Set Inclusion-Exclusion Law:<me> \lvert A_1 \cup A_2 \rvert =\lvert A_1 \rvert + \lvert A_2 \rvert - \lvert A_1 \cap A_2 \rvert  </me></p></li>
<li xml:id="ie3"><p>The Three Set Inclusion-Exclusion Law:
<me> 
\begin{split}
 \lvert A_1 \cup A_2 \cup A_3 \rvert &amp; =\lvert A_1 \rvert + \lvert A_2 \rvert + \lvert A_3 \rvert\\
&amp;\quad - (\lvert A_1 \cap A_2 \rvert + \lvert A_1 \cap A_3 \rvert+ \lvert A_2 \cap A_3 \rvert)\\
&amp;\quad + \lvert A_1 \cap A_2 \cap A_3 \rvert
\end{split} 
</me></p></li>
</ol></p> 
</statement>
</theorem>
</section>
</chapter>	