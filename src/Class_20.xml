<?xml version="1.0" encoding="UTF-8" ?>
<chapter xml:id="chapter_20" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Recursion and Sequences</title>
<idx>Recursion</idx>
<idx>Stack</idx>
<section xml:id="reading-20"><title>Reading Assignment</title>
<p>Read  Sections 8.1 and 8.2 of <em>Applied Discrete Structures</em>.  You will see a variety of things that are most easily described through self-reference.  Most computer languages allow recursion, which can be a powerful tool when used properly. </p>
<question component="paper"><title>Response Question</title><statement><p>  Recursion is used in both mathematics and computer programming. Most programming languages allow recursion and they use something called a <em>stack</em> to allow a function to <q>call</q> itself, such as in the python definition for the <xref ref="s-bsa" text="title"/>.  Google "what is a stack" and briefly describe, in your own words, what you've learned.  </p></statement></question>
<p component="paper">Also, turn in solutions to these exercises: </p>
	<exercises component="paper">
			
<exercise><statement><p>Consider a sequence of strings, <m>L(n)</m> defined recursively by
			 <m>L(n)=L(n-2)+L(n-2)+L(n-1)</m> with <m>L(0)="1"</m> and <m>L(1)="0"</m>. 
			 Here, the plus sign is taken as concatenation of strings.  Determine <m>L(4)</m>.</p></statement></exercise>
			
<exercise><statement><p>Consider sequence <m>Q</m> defined by <m>Q(k) = 2k + 9</m>, <m>k \geq  1</m>. 
			Complete the table below and determine a recurrence relation
		    that describes <m>Q</m>. 
				<m>\begin{array}{c|c|c}
				 k &amp; Q(k)  &amp; Q(k)-Q(k-1) \\
				 \hline
				 2 &amp;   &amp;   \\
				 3 &amp;   &amp;   \\
				 4 &amp; \text{  } &amp;   \\
				 5 &amp;   &amp;   \\
				 6 &amp;   &amp;   \\
				 7 &amp;   &amp;   \\
				\end{array}</m>
		</p></statement></exercise>
		</exercises>  
</section>
<section xml:id="questions-20"><title>In-Class Exercises</title>
<p></p>
<exercises>
		
<exercise><statement><p>What is computed by the following function on the natural numbers?
			 <me>f(n)=\begin{cases} 
			  2 f(n-1)+1 &amp; n \gt 0 \\
			  1			 &amp; n=0
		   \end{cases}</me>
			</p></statement></exercise>
		
<exercise><statement><p>Describe what the following function, <m>f</m>, does on the positive integers.
				<me>f(n)=\begin{cases} 
			  n &amp; n\textrm{ odd} \\
			  3\cdot f(n/2) &amp; n\textrm{ even}
		   \end{cases}</me></p></statement></exercise>
		
<exercise><statement><p>I'm thinking of a number between 1 and 25.  If I know you will use the binary search algorithm to guess my number and I want you to use as many guesses as possible, what are the best numbers for me to think about?</p></statement></exercise>
		
<exercise><statement><p>The length of a string is the number of characters in the string. Let <m>v(n)</m> be the length of <m>L(n)</m>, which was defined in the the homework problems.  Find a recursive description of <m>v(n)</m>.</p></statement></exercise>

<exercise><statement><p><em>Fun Question</em>.  This last question comes from the BBC quiz show <q>Round Britain</q>. I expect that you would need to Google some of these references.  If Barker and Corbett encountered, sequentially, Kieslowski's colours, Blyton's adventurers, Tarantino's undesirables and Thurber's timepieces, how many pilots would they meet next?  The answer will appear at the end of the next chapter.</p></statement></exercise>
</exercises>

</section>
<section xml:id="s-bsa"><title>Binary Search Algorithm</title>
<idx>Binary Search</idx>
<p>Here is a python version of the binary search algorithm.
<cd>
def BinarySearch(r,j,k,C):
   found = False
   if j &#60;= k:
      mid = floor((j + k)/2)
      print('probing at position '+str(mid))
      if r[mid] == C:
         location = mid
         found = True
         print('found in position '+str(location))
         return location
      else:
        if r[mid] > C:
           BinarySearch(r,j, mid - 1,C)
        else:
           BinarySearch(r,mid + 1,k,C)
   else:
      print('not found')
      return False      
</cd>
The output from an example of a search for the number 30  in a list of 28 numbers follows. It should be noted that in python indices start at 0, so we initially look for 30 in the entries indexed from 0 to 29.  Also, probing position 13 means looking at the 14th entry in the list.
<cd>
s=[1,9,13,16,30,31,32,33,36,37,38,45,49,50,52,61,63,64,69,77,79,80,81,83,86,90,93,96]
BinarySearch(s,0,len(s)-1,30)
</cd>
Output:
<cd>
probing at position 13
probing at position 6
probing at position 2
probing at position 4
found in position 4
</cd>
</p>
</section>
</chapter>	